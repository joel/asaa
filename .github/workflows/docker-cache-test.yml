name: Docker Cached Image Test CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - 'LICENSE'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  APP_IMAGE_TAG: base-development:0.1.0
  APP_IMAGE_CACHE_TAG: base-development-cache:0.1.0
  IMAGE_CACHE_DIR: /tmp/cache/docker-image
  IMAGE_CACHE_KEY: cache-image
  DB_PASSWORD: db_password
  DB_USER: root
  DB_HOST: db
  DB_PORT: 3306
  DB_FORWARDED_PORT: 3306
  REDIS_HOST: redis
  REDIS_FORWARDED_PORT: 6379
  ARG_RUBY_VERSION: 2.7.3
  ARG_BUNDLER_VERSION: 2.2.20
  ARG_APP_PATH: /src
  ARG_RUBYGEMS_VERSION: 3.2.20
  REDIS_URL: redis://redis:6379/1
  BUNDLE_PATH: /bundle
  GEM_HOME: /bundle
  VERSION: 0.1.0

jobs:
  image-cache-or-build:
    strategy:
      matrix:
        ruby: ["2.7.3"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: File List
        run: |
          ls -l
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      -
        name: Build and export
        uses: docker/build-push-action@v2
        with:
          build-args: |
            ARG_RUBY_VERSION=${{ env.ARG_RUBY_VERSION }}
            ARG_BUNDLER_VERSION=${{ env.ARG_BUNDLER_VERSION }}
            ARG_APP_PATH=${{ env.ARG_APP_PATH }}
            ARG_RUBYGEMS_VERSION=${{ env.ARG_RUBYGEMS_VERSION }}
          context: .
          file: dockerfiles/Dockerfile.ci
          tags: ${{ env.APP_IMAGE_TAG }}
          outputs: type=docker,dest=/tmp/myimage.tar
      -
        name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: myimage
          path: /tmp/myimage.tar
      -
        name: Docker List
        run: |
          docker container ls
          docker image ls -a

  test-app:
    needs: image-cache-or-build
    strategy:
      matrix:
        ruby: ["2.7.3"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a
          docker container ls
      -
        name: Wait middleware services
        run: docker-compose run --rm wait-middleware
      -
        name: Setup the database
        run: |
          docker-compose run --rm \
            -e DB_HOST=${{ env.DB_HOST }} \
            -e DB_PORT=${{ env.DB_PORT }} \
            -e REDIS_URL=redis://${{ env.REDIS_HOST }}:${{ env.REDIS_PORT }}/1 \
            -e DB_USER=${{ env.DB_USER }} \
            -e DB_PASSWORD=${{ env.DB_PASSWORD }} \
            console bash -c "bin/rails db:setup"
      -
        name: Run test
        run: |
          docker-compose run --rm \
            -e DB_HOST=${{ env.DB_HOST }} \
            -e DB_PORT=${{ env.DB_PORT }} \
            -e REDIS_URL=redis://${{ env.REDIS_HOST }}:${{ env.REDIS_PORT }}/1 \
            -e DB_USER=${{ env.DB_USER }} \
            -e DB_PASSWORD=${{ env.DB_PASSWORD }} \
            console bash -c "bin/rails test"

  scan-image-by-trivy:
    needs: image-cache-or-build
    strategy:
      matrix:
        ruby: ["2.7.3"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    env:
      TRIVY_CACHE_DIR: /tmp/cache/trivy

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a
          docker container ls
      -
        name: Scan image
        run: docker container run
          --rm
          -v /var/run/docker.sock:/var/run/docker.sock
          -v ${{ env.TRIVY_CACHE_DIR }}:/root/.cache/
          aquasec/trivy
          ${{ env.APP_IMAGE_TAG }}

  lint-app:
    needs: image-cache-or-build
    strategy:
      matrix:
        ruby: ["2.7.3"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a
          docker container ls
      -
        name: Wait middleware services
        run: docker-compose run --rm wait-middleware
      -
        name: Lint code
        id: lint-code
        run: |
          docker-compose run --rm \
            -e DB_HOST=${{ env.DB_HOST }} \
            -e DB_PORT=${{ env.DB_PORT }} \
            -e REDIS_URL=redis://${{ env.REDIS_HOST }}:${{ env.REDIS_PORT }}/1 \
            -e DB_USER=${{ env.DB_USER }} \
            -e DB_PASSWORD=${{ env.DB_PASSWORD }} \
            console bash -c "bin/bundle exec rubocop --parallel"